---

- name: Debug | ansible_env var
  ansible.builtin.debug:
    var: ansible_env

- name: FATAL
  ansible.builtin.fail:
    msg: "This role is currently only compatible with Ubuntu"
  when: >
    ansible_distribution != 'Ubuntu'

- name: Include version-specific variables for Ubuntu.
  ansible.builtin.include_vars: "{{ ansible_distribution }}-{{ ansible_distribution_version }}.yml"
  when: ansible_distribution == 'Ubuntu'

## fails under lxd+systemd, https://github.com/ansible/ansible-modules-core/issues/5582
- name: Set hostname
  ansible.builtin.hostname:
    name: "{{ sift_hostname }}"
  when: >
    sift_hostname is defined and
    not (ansible_virtualization_type is defined and ansible_virtualization_type == "lxc")

- name: Add new hostname in /etc/hosts (local resolv)
  ansible.builtin.replace:
    dest: '/etc/hosts'
    regexp: '^127.0.0.1([ ]+)localhost$'
    replace: '127.0.0.1\1localhost {{ sift_hostname }}'
    mode: '0644'
    backup: yes
  when: sift_hostname is defined

# - name: Include version-specific variables for Ubuntu.
#   ansible.builtin.include_vars: "{{ ansible_distribution }}-{{ ansible_distribution_version }}.yml"
#   when: ansible_distribution == 'Ubuntu'

- name: Check if user ~/.gem/specs exists
  ansible.builtin.stat:
    path: "/home/{{ sift_user }}/.gem/specs"
  register: usergemspecs
- name: Check user gem specs dir permissions
  ansible.builtin.file:
    dest: "/home/{{ sift_user }}/.gem/specs"
    state: "directory"
    mode: "0755"
    owner: "{{ sift_user }}"
  when: usergemspecs is defined and usergemspecs.stat.exists

- name: Check current dpkg foreign-architectures
  ansible.builtin.command: dpkg --print-foreign-architectures
  register: archi
  changed_when: False
  when: ansible_architecture == 'x86_64'
- name: Ensure both i386/x86_64 architecture support for packages
  ansible.builtin.command: dpkg --add-architecture i386
  when: ansible_architecture == 'x86_64' and archi.stdout.find('i386') == -1

## https://github.com/sans-dfir/sift-bootstrap/
- name: Include sift
  ansible.builtin.include_tasks: sift.yml
  tags:
    - sift

- name: Restrict sshd config
  ansible.builtin.lineinfile:
    dest: /etc/ssh/sshd_config
    regexp: "{{ item.regexp }}"
    line: "{{ item.line }}"
    mode: '0644'
    backup: yes
  with_items:
    - { regexp: '^PasswordAuthentication', line: 'PasswordAuthentication no' }
    - { regexp: '^PermitRootLogin', line: 'PermitRootLogin without-password' }

- name: Debug | sift_do_x11 var
  ansible.builtin.debug:
    var: sift_do_x11
- name: Include x11
  ansible.builtin.include_tasks: x11.yml
  when: sift_do_x11 is defined and sift_do_x11
  tags:
    - sift

- name: Review some limits  # noqa no-tabs
  ansible.builtin.lineinfile:
    dest: /etc/security/limits.d/openfiles
    regexp: "^{{ sift_user }}\t\thard\tnofiles\t\t2048"
    line: "{{ sift_user }}\t\thard\tnofiles\t\t2048"
    mode: '0644'
    state: present
    create: yes

- name: Include languages-additional
  ansible.builtin.include_tasks: "languages-additional.yml"
  with_items: "{{ sift_extra_languages }}"
  vars:
    lang: "{{ outer_item }}"
  loop_control:
    loop_var: outer_item
