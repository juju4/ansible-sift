---

- name: Creating sansforensics group
  group: name={{ sift_user }}
## used as samba guest
- name: Creating sansforensics generic account
  user: name={{ sift_user }} password={{ sift_pass }} groups={{ sift_user }},sudo append=yes

- name: adding SIFT repository - stable
  apt_repository: repo='ppa:sift/stable' state=present
  when: ansible_distribution_release == 'trusty'

#- name: adding SIFT repository - dev
#  apt_repository: repo='ppa:sift/dev' state=present
#  when: ansible_distribution_release == 'xenial'

- name: adding Ubuntu Tweak repository
  apt_repository: repo='ppa:tualatrix/ppa' state=present
  when: ansible_distribution_release == 'trusty'

# Xenial, bionic: universe and multiverse already enabled by default
#- name: Enabling Universe repository
#  apt_repository:
#    repo: "deb http://archive.ubuntu.com/ubuntu {{ ansible_distribution_release | lower }} universe"
#    state: present
#- name: Enabling Multiverse repository
#  apt_repository:
#    repo: "deb http://archive.ubuntu.com/ubuntu {{ ansible_distribution_release | lower }} multiverse"
#    state: present
#- name: Enabling Multiverse security updates
#  replace:
#    dest: /etc/apt/sources.list
#    regexp: '^# (.*)multiverse$'
#    replace: '\1multiverse'
#    backup: yes
- name: check sources.list
  command: cat /etc/apt/sources.list
  register: sources
  changed_when: false
- debug: var=sources.stdout_lines
# Some 64-bit systems are not configured to support i386 packages. Let's make sure they are enabled. (done in main.yml)
#- name: Ensure both i386/x86_64 architecture support for packages
#  command: dpkg --add-architecture i386
#- command: ldconfig


- name: SIFT | accept Microsoft EULA for ttf-mscorefonts-installer
  debconf: name=ttf-mscorefonts-installer question='msttcorefonts/accepted-mscorefonts-eula' value=true vtype='select'

- name: SIFT | packages install
  apt: name={{ item }} state=present update_cache=yes cache_valid_time=3600
  with_items: "{{ sift_packages }}"
  notify:
    - Updating ClamAV Signatures
  async: 7200
  poll: 300
  register: pkg_result
  until: pkg_result is success

- name: SIFT | apache2 packages install
  apt: name=apache2 state=present
  when: sift_webserver is defined and sift_webserver == 'apache2'
  register: pkg_result
  until: pkg_result is success

- name: SIFT | docker packages install
  apt: name={{ sift_docker_pkg }} state=present
  when: sift_docker
  register: pkg_result
  until: pkg_result is success

## missing dependencies in some case?
- name: Debian | gedit install
  apt: name=gedit state=present
  ignore_errors: true
  register: pkg_result
  until: pkg_result is success

- name: Check if pescan is present
  stat: path=/usr/bin/pescan
  register: rpev
- name: Debian | pev install (only if not remnux-pev)
  apt: name=pev state=present
  when: not rpev.stat.exists
  register: pkg_result
  until: pkg_result is success

##- name: Setting up auto-login for user {{ sift_user }}
##- name: Setting up auto-login for user {{ sift_user }}
##  replace: dest='/etc/lxdm/lxdm.conf' regexp={{ item.regexp }} replace={{ item.replace }}
##  with_items:
##    - { regexp: '^#\ autologin=dgod', replace: "autologin={{ sift_user }}" }
##    - { regexp: '^disable=0$', replace: 'disable=1' }
#- name: Setting up auto-login for user {{ sift_user }}
#  replace: dest='/etc/lxdm/lxdm.conf' regexp='^#\ autologin=dgod' replace="autologin={{ sift_user }}"
#- replace: dest='/etc/lxdm/lxdm.conf' regexp='^disable=0$' replace='disable=1'

- include: pip-upgrade.yml

- name: Install pip packages dependencies
  package: name={{ sift_pip_packages_deps }} state=present
  register: pkg_result
  until: pkg_result is success
- name: Install pip packages
  pip: name={{ sift_pip_packages }} state=present
  register: pkg_result
  until: pkg_result is success

- name: Install perl modules
  cpanm: name={{ item }}
  with_items:
    - Net::Wigle
  register: pkg_result
  until: pkg_result is success

- block:
    - include: elasticsearch.yml
    - include: kibana.yml
  when: sift_elastic1 is defined and sift_elastic1


- name: Install SIFT files
  git:
    repo: https://github.com/sans-dfir/sift-files
    dest: /tmp/sift-files
    version: HEAD
    recursive: no
## FIXME! (if recursive=yes) Failed to init/update submodules: No submodule mapping found in .gitmodules
##      for path 'Java_IDX_Parser'
#- command: "bash install.sh chdir=/tmp/sift-files"
#  ignore_errors: true
- include: sift-files-install.yml

- name: Create SIFT folders
  file:
    path: "{{ item }}"
    state: directory
    mode: '1775'
    owner: "{{ sift_user }}"
    group: "{{ sift_user }}"
  with_items:
    - /cases
- name: Create SIFT folders
  file:
    path: "{{ item }}"
    state: directory
    mode: '0755'
  with_items:
    - /mnt/usb
    - /mnt/vss
    - /mnt/shadow
    - /mnt/windows_mount
    - /mnt/e01
    - /mnt/aff
    - /mnt/ewf
    - /mnt/bde
    - /mnt/iscsi
    - /mnt/windows_mount1
    - /mnt/windows_mount2
    - /mnt/windows_mount3
    - /mnt/windows_mount4
    - /mnt/windows_mount5
    - /mnt/ewf_mount1
    - /mnt/ewf_mount2
    - /mnt/ewf_mount3
    - /mnt/ewf_mount4
    - /mnt/ewf_mount5
- name: Create SIFT folders
  file:
    path: "/mnt/shadow/vss{{ item }}"
    state: directory
    mode: '0755'
  with_items:
    - [ 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30 ]
- name: Create SIFT folders
  file:
    path: "/mnt/shadow_mount/vss{{ item }}"
    state: directory
    mode: '0755'
  with_items:
    - [ 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30 ]

- name: setting symlinks
  file:
    src: "{{ item.src }}"
    path: "{{ item.path }}"
    state: link
  with_items:
    - { src: '/usr/bin/gedit', path: '/usr/bin/kedit' }
    - { src: '/etc/foremost.conf', path: '/usr/local/etc/foremost.conf' }
#    - { src: '/usr/bin/iscsiadm', path: '/sbin/iscsiadm' }
    - "{{  gift_ppa_symlinks }}"
    - "{{  sift_ppa_symlinks }}"

- name: Check if /etc/apt/apt.conf.d/10periodic exists
  stat:
    path: /etc/apt/apt.conf.d/10periodic
  register: periodic
- name: disable automated package update
  lineinfile:
    dest: /etc/apt/apt.conf.d/10periodic
    regexp: '^APT::Periodic::Update-Package-Lists'
    line: 'APT::Periodic::Update-Package-Lists "0";'
  when: periodic.stat.exists

- name: ensure current user is used for samba
  replace:
    dest: /etc/samba/smb.conf
    regexp: 'SIFT_USER'
    replace: "{{ sift_user }}"
  notify:
    - restart samba smbd
    - restart samba nmbd

- name: Set timezone variables
  replace: dest=/etc/timezone regexp='(.*)' replace={{ tz }} backup=yes
  notify:
    - update timezone

- include: sift-ppa.yml
  when: ansible_distribution_release == 'trusty' or  ansible_distribution_release == 'xenial'

- include: bulk-extractor.yml
  when: ansible_distribution_release != 'trusty'

- name: Setting noclobber for {{ sift_user }} and root
  lineinfile:
    dest: "{{ item }}"
    regexp: '^set -o noclobber'
    line: 'set -o noclobber'
  with_items:
    - "/home/{{ sift_user }}/.bashrc"
    - /root/.bashrc
- name: Configuring Aliases for {{ sift_user }} and root
  lineinfile:
    dest: "{{ item }}"
    regexp: '^alias mountwin='
    line: 'alias mountwin="mount -o ro,loop,show_sys_files,streams_interface=windows"'
    create: yes
  with_items:
    - "/home/{{ sift_user }}/.bash_aliases"
    - /root/.bash_aliases

- name: Sanity check for Desktop folder
  file: path="/home/{{ sift_user }}/Desktop" state=directory mode=0700

- name: Setting up useful links on {{ sift_user }} Desktop
  file: src="{{ item.src }}" path="{{ item.path }}" state=link
  with_items:
    - { src: '/cases', path: "/home/{{ sift_user }}/Desktop/cases" }
    - { src: '/mnt', path: "/home/{{ sift_user }}/Desktop/mount_points" }

## FIXME! not idempotent
#- name: Cleaning up broken symlinks on Desktop
#  command: "find -L /home/{{ sift_user }}/Desktop -type l -delete"

- name: Ensure user Desktop directory exists
  file: dest="/home/{{ sift_user }}/Desktop" state=directory mode=0755
- name: Adding all SIFT Resources to Desktop
  file:
    src: "/usr/share/sift/resources/{{ item }}"
    dest: "/home/{{ sift_user }}/Desktop/{{ item | basename }}"
    state: link
#  with_fileglob:
#    - /usr/share/sift/resources/*.pdf
  with_items:
    - Evidence-of-Poster.pdf
    - Find-Evil-Poster.pdf
    - SANS-DFIR.pdf
    - Smartphone-Forensics-Poster.pdf
    - memory-forensics-cheatsheet.pdf
    - network-forensics-cheatsheet.pdf
    - sift-cheatsheet.pdf
    - windows-to-unix-cheatsheet.pdf

- name: Add extra device loop backs
  lineinfile:
    dest: /etc/rc.local
    regexp: 'seq 8 100'
    line: 'for i in `seq 8 100`; do mknod /dev/loop$i b 7 $i; done'
    backup: yes
    create: yes

## Manual or alternative
## https://github.com/jistr/ansible-gsetting
## https://github.com/JBKahn/provisioning-local/tree/master/ansible_modules/{dconf,gconftool-2,gsettings}
- name: SIFT Wallpaper Configuration
  command: "{{ item }}"
  with_items:
    - "gsettings set org.gnome.desktop.background picture-uri file:///usr/share/sift/images/forensics_blue.jpg"
  ignore_errors: true
  become: yes
  become_user: "{{ sift_user }}"
  when: sift_x11_background is defined and sift_x11_background
- name: Set desktop background with gsettings
  command: gsettings set com.canonical.unity-greeter background file:///usr/share/sift/images/forensics_blue.jpg
  when: ansible_distribution_version == '12.04' and sift_x11_background is defined and sift_x11_background

- name: SIFT Configuration Function
  command: "{{ item }}"
  with_items:
    - "gsettings set org.gnome.desktop.background picture-uri file:///usr/share/sift/images/forensics_blue.jpg"
## stderr: No such schema 'com.canonical.Unity.Launcher'
    - "gsettings set com.canonical.Unity.Launcher favorites \"['application://nautilus.desktop', 'application://gnome-terminal.desktop', 'application://firefox.desktop', 'application://gnome-screenshot.desktop', 'application://gcalctool.desktop', 'application://bless.desktop', 'application://autopsy.desktop', 'application://wireshark.desktop']\""
  ignore_errors: true
  become: yes
  become_user: "{{ sift_user }}"
  when: sift_x11_env is defined and sift_x11_env

- name: Autostart folder
  file: path="{{ item }}" state=directory mode=0700 owner={{ sift_user }} group={{ sift_user }}
  with_items:
    - "/home/{{ sift_user }}/.config/autostart"

- name: Check if /usr/share/sift/other/gnome-terminal.desktop exists
  stat: path=/usr/share/sift/other/gnome-terminal.desktop
  register: gtd
- name: autostart sift gnome-terminal
  copy:
    src: /usr/share/sift/other/gnome-terminal.desktop
    dest: "/home/{{ sift_user }}/.config/autostart/gnome-terminal.desktop"
    owner: "{{ sift_user }}"
  when: gtd.stat.exists

- name: symlink sift forensics background
  file:
    src: /usr/share/sift/images/forensics_blue.jpg
    dest: /usr/share/backgrounds/warty-final-ubuntu.png
    mode: 0644
    state: link
    force: yes
  when: sift_x11_background is defined and sift_x11_background
